// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ConfigurationAttribute {
  id String @id @default(uuid(7)) @db.Uuid

  name  String @unique
  value String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("configuration_attribute")
}

model User {
  id     String @id @default(uuid(7)) @db.Uuid
  points Float    @default(0) @map("points")

  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt @map("updated_at")
  deletedAt                 DateTime?                   @map("deleted_at")
  UserAuthorizationProvider UserAuthorizationProvider[]
  UserRole                  UserRole[]
  UserProfile               UserProfile?

  @@map("user")
}

model UserProfile {
  id String @id @default(uuid(7)) @db.Uuid

  displayName String?
  login       String?
  avatar      String?

  userId String @unique @map("user_id") @db.Uuid
  User   User   @relation(fields: [userId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("user_profile")
}

model AuthorizationProvider {
  id                   String  @id @default(uuid(7)) @db.Uuid
  clientId             String? @map("client_id")
  associationClaimType String  @map("association_claim_type")
  tokenUrl             String? @map("token_url")
  secret               String?
  name                 String  @unique

  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @updatedAt @map("updated_at")
  deletedAt                 DateTime?                   @map("deleted_at")
  UserAuthorizationProvider UserAuthorizationProvider[]

  @@map("authorization_provider")
}

model UserAuthorizationProvider {
  id                      String @id @default(uuid(7)) @db.Uuid
  authorizationProviderId String @map("authorization_provider_id") @db.Uuid
  userId                  String @map("user_id") @db.Uuid
  email                   String @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  AuthorizationProvider AuthorizationProvider @relation(fields: [authorizationProviderId], references: [id])
  User                  User                  @relation(fields: [userId], references: [id])

  @@map("user_authorization_provider")
}

enum UserRole {
  USER
  ADMIN
}
